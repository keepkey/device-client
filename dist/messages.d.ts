// generated by Proto2Typescript. do not touch!

declare module DeviceMessages {
	interface ProtoBufModel {
		toArrayBuffer(): ArrayBuffer;
		toBuffer(): Buffer;
		encode(): ByteBuffer;
		toBase64(): string;
		toString(): string;
	}

	export interface ProtoBufBuilder {
		ExchangeAddress: ExchangeAddressBuilder;
		ExchangeResponseV2: ExchangeResponseV2Builder;
		SignedExchangeResponse: SignedExchangeResponseBuilder;
		ExchangeResponse: ExchangeResponseBuilder;
		HDNodeType: HDNodeTypeBuilder;
		HDNodePathType: HDNodePathTypeBuilder;
		CoinType: CoinTypeBuilder;
		MultisigRedeemScriptType: MultisigRedeemScriptTypeBuilder;
		TxInputType: TxInputTypeBuilder;
		TxOutputType: TxOutputTypeBuilder;
		TxOutputBinType: TxOutputBinTypeBuilder;
		TransactionType: TransactionTypeBuilder;
		RawTransactionType: RawTransactionTypeBuilder;
		TxRequestDetailsType: TxRequestDetailsTypeBuilder;
		TxRequestSerializedType: TxRequestSerializedTypeBuilder;
		IdentityType: IdentityTypeBuilder;
		PolicyType: PolicyTypeBuilder;
		ExchangeType: ExchangeTypeBuilder;
		Initialize: InitializeBuilder;
		GetFeatures: GetFeaturesBuilder;
		Features: FeaturesBuilder;
		ClearSession: ClearSessionBuilder;
		ApplySettings: ApplySettingsBuilder;
		ChangePin: ChangePinBuilder;
		Ping: PingBuilder;
		Success: SuccessBuilder;
		Failure: FailureBuilder;
		ButtonRequest: ButtonRequestBuilder;
		ButtonAck: ButtonAckBuilder;
		PinMatrixRequest: PinMatrixRequestBuilder;
		PinMatrixAck: PinMatrixAckBuilder;
		Cancel: CancelBuilder;
		PassphraseRequest: PassphraseRequestBuilder;
		PassphraseAck: PassphraseAckBuilder;
		GetEntropy: GetEntropyBuilder;
		Entropy: EntropyBuilder;
		GetPublicKey: GetPublicKeyBuilder;
		PublicKey: PublicKeyBuilder;
		GetAddress: GetAddressBuilder;
		EthereumGetAddress: EthereumGetAddressBuilder;
		Address: AddressBuilder;
		EthereumAddress: EthereumAddressBuilder;
		WipeDevice: WipeDeviceBuilder;
		LoadDevice: LoadDeviceBuilder;
		ResetDevice: ResetDeviceBuilder;
		EntropyRequest: EntropyRequestBuilder;
		EntropyAck: EntropyAckBuilder;
		RecoveryDevice: RecoveryDeviceBuilder;
		WordRequest: WordRequestBuilder;
		WordAck: WordAckBuilder;
		CharacterRequest: CharacterRequestBuilder;
		CharacterAck: CharacterAckBuilder;
		SignMessage: SignMessageBuilder;
		VerifyMessage: VerifyMessageBuilder;
		MessageSignature: MessageSignatureBuilder;
		EncryptMessage: EncryptMessageBuilder;
		EncryptedMessage: EncryptedMessageBuilder;
		DecryptMessage: DecryptMessageBuilder;
		DecryptedMessage: DecryptedMessageBuilder;
		CipherKeyValue: CipherKeyValueBuilder;
		CipheredKeyValue: CipheredKeyValueBuilder;
		EstimateTxSize: EstimateTxSizeBuilder;
		TxSize: TxSizeBuilder;
		SignTx: SignTxBuilder;
		SimpleSignTx: SimpleSignTxBuilder;
		TxRequest: TxRequestBuilder;
		TxAck: TxAckBuilder;
		RawTxAck: RawTxAckBuilder;
		EthereumSignTx: EthereumSignTxBuilder;
		EthereumTxRequest: EthereumTxRequestBuilder;
		EthereumTxAck: EthereumTxAckBuilder;
		SignIdentity: SignIdentityBuilder;
		SignedIdentity: SignedIdentityBuilder;
		ApplyPolicies: ApplyPoliciesBuilder;
		FirmwareErase: FirmwareEraseBuilder;
		FirmwareUpload: FirmwareUploadBuilder;
		DebugLinkDecision: DebugLinkDecisionBuilder;
		DebugLinkGetState: DebugLinkGetStateBuilder;
		DebugLinkState: DebugLinkStateBuilder;
		DebugLinkStop: DebugLinkStopBuilder;
		DebugLinkLog: DebugLinkLogBuilder;
		DebugLinkFillConfig: DebugLinkFillConfigBuilder;
		FailureType: FailureType;
		OutputScriptType: OutputScriptType;
		InputScriptType: InputScriptType;
		RequestType: RequestType;
		OutputAddressType: OutputAddressType;
		ButtonRequestType: ButtonRequestType;
		PinMatrixRequestType: PinMatrixRequestType;
		MessageType: MessageType;
		
	}
}

declare module DeviceMessages {

	export interface ExchangeAddress extends ProtoBufModel {
		coin_type?: string;
		getCoinType() : string;
		setCoinType(coinType : string): void;
		address?: string;
		getAddress() : string;
		setAddress(address : string): void;
		dest_tag?: string;
		getDestTag() : string;
		setDestTag(destTag : string): void;
		rs_address?: string;
		getRsAddress() : string;
		setRsAddress(rsAddress : string): void;
		
	}
	
	export interface ExchangeAddressBuilder {
		new(): ExchangeAddress;
		decode(buffer: ArrayBuffer) : ExchangeAddress;
		//decode(buffer: NodeBuffer) : ExchangeAddress;
		//decode(buffer: ByteArrayBuffer) : ExchangeAddress;
		decode64(buffer: string) : ExchangeAddress;
		
	}	
}

declare module DeviceMessages {

	export interface ExchangeResponseV2 extends ProtoBufModel {
		deposit_address?: ExchangeAddress;
		getDepositAddress() : ExchangeAddress;
		setDepositAddress(depositAddress : ExchangeAddress): void;
		deposit_amount?: ByteBuffer;
		getDepositAmount() : ByteBuffer;
		setDepositAmount(depositAmount : ByteBuffer): void;
		expiration?: Long;
		getExpiration() : Long;
		setExpiration(expiration : Long): void;
		quoted_rate?: ByteBuffer;
		getQuotedRate() : ByteBuffer;
		setQuotedRate(quotedRate : ByteBuffer): void;
		withdrawal_address?: ExchangeAddress;
		getWithdrawalAddress() : ExchangeAddress;
		setWithdrawalAddress(withdrawalAddress : ExchangeAddress): void;
		withdrawal_amount?: ByteBuffer;
		getWithdrawalAmount() : ByteBuffer;
		setWithdrawalAmount(withdrawalAmount : ByteBuffer): void;
		return_address?: ExchangeAddress;
		getReturnAddress() : ExchangeAddress;
		setReturnAddress(returnAddress : ExchangeAddress): void;
		api_key?: ByteBuffer;
		getApiKey() : ByteBuffer;
		setApiKey(apiKey : ByteBuffer): void;
		miner_fee?: ByteBuffer;
		getMinerFee() : ByteBuffer;
		setMinerFee(minerFee : ByteBuffer): void;
		order_id?: ByteBuffer;
		getOrderId() : ByteBuffer;
		setOrderId(orderId : ByteBuffer): void;
		
	}
	
	export interface ExchangeResponseV2Builder {
		new(): ExchangeResponseV2;
		decode(buffer: ArrayBuffer) : ExchangeResponseV2;
		//decode(buffer: NodeBuffer) : ExchangeResponseV2;
		//decode(buffer: ByteArrayBuffer) : ExchangeResponseV2;
		decode64(buffer: string) : ExchangeResponseV2;
		
	}	
}

declare module DeviceMessages {

	export interface SignedExchangeResponse extends ProtoBufModel {
		response?: ExchangeResponse;
		getResponse() : ExchangeResponse;
		setResponse(response : ExchangeResponse): void;
		signature?: ByteBuffer;
		getSignature() : ByteBuffer;
		setSignature(signature : ByteBuffer): void;
		responseV2?: ExchangeResponseV2;
		getResponseV2() : ExchangeResponseV2;
		setResponseV2(responseV2 : ExchangeResponseV2): void;
		
	}
	
	export interface SignedExchangeResponseBuilder {
		new(): SignedExchangeResponse;
		decode(buffer: ArrayBuffer) : SignedExchangeResponse;
		//decode(buffer: NodeBuffer) : SignedExchangeResponse;
		//decode(buffer: ByteArrayBuffer) : SignedExchangeResponse;
		decode64(buffer: string) : SignedExchangeResponse;
		
	}	
}

declare module DeviceMessages {

	export interface ExchangeResponse extends ProtoBufModel {
		deposit_address?: ExchangeAddress;
		getDepositAddress() : ExchangeAddress;
		setDepositAddress(depositAddress : ExchangeAddress): void;
		deposit_amount?: Long;
		getDepositAmount() : Long;
		setDepositAmount(depositAmount : Long): void;
		expiration?: Long;
		getExpiration() : Long;
		setExpiration(expiration : Long): void;
		quoted_rate?: Long;
		getQuotedRate() : Long;
		setQuotedRate(quotedRate : Long): void;
		withdrawal_address?: ExchangeAddress;
		getWithdrawalAddress() : ExchangeAddress;
		setWithdrawalAddress(withdrawalAddress : ExchangeAddress): void;
		withdrawal_amount?: Long;
		getWithdrawalAmount() : Long;
		setWithdrawalAmount(withdrawalAmount : Long): void;
		return_address?: ExchangeAddress;
		getReturnAddress() : ExchangeAddress;
		setReturnAddress(returnAddress : ExchangeAddress): void;
		api_key?: ByteBuffer;
		getApiKey() : ByteBuffer;
		setApiKey(apiKey : ByteBuffer): void;
		miner_fee?: Long;
		getMinerFee() : Long;
		setMinerFee(minerFee : Long): void;
		order_id?: ByteBuffer;
		getOrderId() : ByteBuffer;
		setOrderId(orderId : ByteBuffer): void;
		
	}
	
	export interface ExchangeResponseBuilder {
		new(): ExchangeResponse;
		decode(buffer: ArrayBuffer) : ExchangeResponse;
		//decode(buffer: NodeBuffer) : ExchangeResponse;
		//decode(buffer: ByteArrayBuffer) : ExchangeResponse;
		decode64(buffer: string) : ExchangeResponse;
		
	}	
}

declare module DeviceMessages {

	export interface HDNodeType extends ProtoBufModel {
		depth: number;
		getDepth() : number;
		setDepth(depth : number): void;
		fingerprint: number;
		getFingerprint() : number;
		setFingerprint(fingerprint : number): void;
		child_num: number;
		getChildNum() : number;
		setChildNum(childNum : number): void;
		chain_code: ByteBuffer;
		getChainCode() : ByteBuffer;
		setChainCode(chainCode : ByteBuffer): void;
		private_key?: ByteBuffer;
		getPrivateKey() : ByteBuffer;
		setPrivateKey(privateKey : ByteBuffer): void;
		public_key?: ByteBuffer;
		getPublicKey() : ByteBuffer;
		setPublicKey(publicKey : ByteBuffer): void;
		
	}
	
	export interface HDNodeTypeBuilder {
		new(): HDNodeType;
		decode(buffer: ArrayBuffer) : HDNodeType;
		//decode(buffer: NodeBuffer) : HDNodeType;
		//decode(buffer: ByteArrayBuffer) : HDNodeType;
		decode64(buffer: string) : HDNodeType;
		
	}	
}

declare module DeviceMessages {

	export interface HDNodePathType extends ProtoBufModel {
		node: HDNodeType;
		getNode() : HDNodeType;
		setNode(node : HDNodeType): void;
		address_n: number[];
		getAddressN() : number[];
		setAddressN(addressN : number[]): void;
		
	}
	
	export interface HDNodePathTypeBuilder {
		new(): HDNodePathType;
		decode(buffer: ArrayBuffer) : HDNodePathType;
		//decode(buffer: NodeBuffer) : HDNodePathType;
		//decode(buffer: ByteArrayBuffer) : HDNodePathType;
		decode64(buffer: string) : HDNodePathType;
		
	}	
}

declare module DeviceMessages {

	export interface CoinType extends ProtoBufModel {
		coin_name?: string;
		getCoinName() : string;
		setCoinName(coinName : string): void;
		coin_shortcut?: string;
		getCoinShortcut() : string;
		setCoinShortcut(coinShortcut : string): void;
		address_type?: number;
		getAddressType() : number;
		setAddressType(addressType : number): void;
		maxfee_kb?: Long;
		getMaxfeeKb() : Long;
		setMaxfeeKb(maxfeeKb : Long): void;
		address_type_p2sh?: number;
		getAddressTypeP2sh() : number;
		setAddressTypeP2sh(addressTypeP2sh : number): void;
		address_type_p2wpkh?: number;
		getAddressTypeP2wpkh() : number;
		setAddressTypeP2wpkh(addressTypeP2wpkh : number): void;
		address_type_p2wsh?: number;
		getAddressTypeP2wsh() : number;
		setAddressTypeP2wsh(addressTypeP2wsh : number): void;
		signed_message_header?: string;
		getSignedMessageHeader() : string;
		setSignedMessageHeader(signedMessageHeader : string): void;
		bip44_account_path?: number;
		getBip44AccountPath() : number;
		setBip44AccountPath(bip44AccountPath : number): void;
		forkid?: number;
		getForkid() : number;
		setForkid(forkid : number): void;
		decimals?: number;
		getDecimals() : number;
		setDecimals(decimals : number): void;
		contract_address?: ByteBuffer;
		getContractAddress() : ByteBuffer;
		setContractAddress(contractAddress : ByteBuffer): void;
		gas_limit?: ByteBuffer;
		getGasLimit() : ByteBuffer;
		setGasLimit(gasLimit : ByteBuffer): void;
		
	}
	
	export interface CoinTypeBuilder {
		new(): CoinType;
		decode(buffer: ArrayBuffer) : CoinType;
		//decode(buffer: NodeBuffer) : CoinType;
		//decode(buffer: ByteArrayBuffer) : CoinType;
		decode64(buffer: string) : CoinType;
		
	}	
}

declare module DeviceMessages {

	export interface MultisigRedeemScriptType extends ProtoBufModel {
		pubkeys: HDNodePathType[];
		getPubkeys() : HDNodePathType[];
		setPubkeys(pubkeys : HDNodePathType[]): void;
		signatures: ByteBuffer[];
		getSignatures() : ByteBuffer[];
		setSignatures(signatures : ByteBuffer[]): void;
		m?: number;
		getM() : number;
		setM(m : number): void;
		
	}
	
	export interface MultisigRedeemScriptTypeBuilder {
		new(): MultisigRedeemScriptType;
		decode(buffer: ArrayBuffer) : MultisigRedeemScriptType;
		//decode(buffer: NodeBuffer) : MultisigRedeemScriptType;
		//decode(buffer: ByteArrayBuffer) : MultisigRedeemScriptType;
		decode64(buffer: string) : MultisigRedeemScriptType;
		
	}	
}

declare module DeviceMessages {

	export interface TxInputType extends ProtoBufModel {
		address_n: number[];
		getAddressN() : number[];
		setAddressN(addressN : number[]): void;
		prev_hash: ByteBuffer;
		getPrevHash() : ByteBuffer;
		setPrevHash(prevHash : ByteBuffer): void;
		prev_index: number;
		getPrevIndex() : number;
		setPrevIndex(prevIndex : number): void;
		script_sig?: ByteBuffer;
		getScriptSig() : ByteBuffer;
		setScriptSig(scriptSig : ByteBuffer): void;
		sequence?: number;
		getSequence() : number;
		setSequence(sequence : number): void;
		script_type?: InputScriptType;
		getScriptType() : InputScriptType;
		setScriptType(scriptType : InputScriptType): void;
		multisig?: MultisigRedeemScriptType;
		getMultisig() : MultisigRedeemScriptType;
		setMultisig(multisig : MultisigRedeemScriptType): void;
		amount?: Long;
		getAmount() : Long;
		setAmount(amount : Long): void;
		
	}
	
	export interface TxInputTypeBuilder {
		new(): TxInputType;
		decode(buffer: ArrayBuffer) : TxInputType;
		//decode(buffer: NodeBuffer) : TxInputType;
		//decode(buffer: ByteArrayBuffer) : TxInputType;
		decode64(buffer: string) : TxInputType;
		
	}	
}

declare module DeviceMessages {

	export interface TxOutputType extends ProtoBufModel {
		address?: string;
		getAddress() : string;
		setAddress(address : string): void;
		address_n: number[];
		getAddressN() : number[];
		setAddressN(addressN : number[]): void;
		amount: Long;
		getAmount() : Long;
		setAmount(amount : Long): void;
		script_type: OutputScriptType;
		getScriptType() : OutputScriptType;
		setScriptType(scriptType : OutputScriptType): void;
		multisig?: MultisigRedeemScriptType;
		getMultisig() : MultisigRedeemScriptType;
		setMultisig(multisig : MultisigRedeemScriptType): void;
		op_return_data?: ByteBuffer;
		getOpReturnData() : ByteBuffer;
		setOpReturnData(opReturnData : ByteBuffer): void;
		address_type?: OutputAddressType;
		getAddressType() : OutputAddressType;
		setAddressType(addressType : OutputAddressType): void;
		exchange_type?: ExchangeType;
		getExchangeType() : ExchangeType;
		setExchangeType(exchangeType : ExchangeType): void;
		
	}
	
	export interface TxOutputTypeBuilder {
		new(): TxOutputType;
		decode(buffer: ArrayBuffer) : TxOutputType;
		//decode(buffer: NodeBuffer) : TxOutputType;
		//decode(buffer: ByteArrayBuffer) : TxOutputType;
		decode64(buffer: string) : TxOutputType;
		
	}	
}

declare module DeviceMessages {

	export interface TxOutputBinType extends ProtoBufModel {
		amount: Long;
		getAmount() : Long;
		setAmount(amount : Long): void;
		script_pubkey: ByteBuffer;
		getScriptPubkey() : ByteBuffer;
		setScriptPubkey(scriptPubkey : ByteBuffer): void;
		
	}
	
	export interface TxOutputBinTypeBuilder {
		new(): TxOutputBinType;
		decode(buffer: ArrayBuffer) : TxOutputBinType;
		//decode(buffer: NodeBuffer) : TxOutputBinType;
		//decode(buffer: ByteArrayBuffer) : TxOutputBinType;
		decode64(buffer: string) : TxOutputBinType;
		
	}	
}

declare module DeviceMessages {

	export interface TransactionType extends ProtoBufModel {
		version?: number;
		getVersion() : number;
		setVersion(version : number): void;
		inputs: TxInputType[];
		getInputs() : TxInputType[];
		setInputs(inputs : TxInputType[]): void;
		bin_outputs: TxOutputBinType[];
		getBinOutputs() : TxOutputBinType[];
		setBinOutputs(binOutputs : TxOutputBinType[]): void;
		outputs: TxOutputType[];
		getOutputs() : TxOutputType[];
		setOutputs(outputs : TxOutputType[]): void;
		lock_time?: number;
		getLockTime() : number;
		setLockTime(lockTime : number): void;
		inputs_cnt?: number;
		getInputsCnt() : number;
		setInputsCnt(inputsCnt : number): void;
		outputs_cnt?: number;
		getOutputsCnt() : number;
		setOutputsCnt(outputsCnt : number): void;
		extra_data?: ByteBuffer;
		getExtraData() : ByteBuffer;
		setExtraData(extraData : ByteBuffer): void;
		extra_data_len?: number;
		getExtraDataLen() : number;
		setExtraDataLen(extraDataLen : number): void;
		
	}
	
	export interface TransactionTypeBuilder {
		new(): TransactionType;
		decode(buffer: ArrayBuffer) : TransactionType;
		//decode(buffer: NodeBuffer) : TransactionType;
		//decode(buffer: ByteArrayBuffer) : TransactionType;
		decode64(buffer: string) : TransactionType;
		
	}	
}

declare module DeviceMessages {

	export interface RawTransactionType extends ProtoBufModel {
		payload: ByteBuffer;
		getPayload() : ByteBuffer;
		setPayload(payload : ByteBuffer): void;
		
	}
	
	export interface RawTransactionTypeBuilder {
		new(): RawTransactionType;
		decode(buffer: ArrayBuffer) : RawTransactionType;
		//decode(buffer: NodeBuffer) : RawTransactionType;
		//decode(buffer: ByteArrayBuffer) : RawTransactionType;
		decode64(buffer: string) : RawTransactionType;
		
	}	
}

declare module DeviceMessages {

	export interface TxRequestDetailsType extends ProtoBufModel {
		request_index?: number;
		getRequestIndex() : number;
		setRequestIndex(requestIndex : number): void;
		tx_hash?: ByteBuffer;
		getTxHash() : ByteBuffer;
		setTxHash(txHash : ByteBuffer): void;
		extra_data_len?: number;
		getExtraDataLen() : number;
		setExtraDataLen(extraDataLen : number): void;
		extra_data_offset?: number;
		getExtraDataOffset() : number;
		setExtraDataOffset(extraDataOffset : number): void;
		
	}
	
	export interface TxRequestDetailsTypeBuilder {
		new(): TxRequestDetailsType;
		decode(buffer: ArrayBuffer) : TxRequestDetailsType;
		//decode(buffer: NodeBuffer) : TxRequestDetailsType;
		//decode(buffer: ByteArrayBuffer) : TxRequestDetailsType;
		decode64(buffer: string) : TxRequestDetailsType;
		
	}	
}

declare module DeviceMessages {

	export interface TxRequestSerializedType extends ProtoBufModel {
		signature_index?: number;
		getSignatureIndex() : number;
		setSignatureIndex(signatureIndex : number): void;
		signature?: ByteBuffer;
		getSignature() : ByteBuffer;
		setSignature(signature : ByteBuffer): void;
		serialized_tx?: ByteBuffer;
		getSerializedTx() : ByteBuffer;
		setSerializedTx(serializedTx : ByteBuffer): void;
		
	}
	
	export interface TxRequestSerializedTypeBuilder {
		new(): TxRequestSerializedType;
		decode(buffer: ArrayBuffer) : TxRequestSerializedType;
		//decode(buffer: NodeBuffer) : TxRequestSerializedType;
		//decode(buffer: ByteArrayBuffer) : TxRequestSerializedType;
		decode64(buffer: string) : TxRequestSerializedType;
		
	}	
}

declare module DeviceMessages {

	export interface IdentityType extends ProtoBufModel {
		proto?: string;
		getProto() : string;
		setProto(proto : string): void;
		user?: string;
		getUser() : string;
		setUser(user : string): void;
		host?: string;
		getHost() : string;
		setHost(host : string): void;
		port?: string;
		getPort() : string;
		setPort(port : string): void;
		path?: string;
		getPath() : string;
		setPath(path : string): void;
		index?: number;
		getIndex() : number;
		setIndex(index : number): void;
		
	}
	
	export interface IdentityTypeBuilder {
		new(): IdentityType;
		decode(buffer: ArrayBuffer) : IdentityType;
		//decode(buffer: NodeBuffer) : IdentityType;
		//decode(buffer: ByteArrayBuffer) : IdentityType;
		decode64(buffer: string) : IdentityType;
		
	}	
}

declare module DeviceMessages {

	export interface PolicyType extends ProtoBufModel {
		policy_name?: string;
		getPolicyName() : string;
		setPolicyName(policyName : string): void;
		enabled?: boolean;
		getEnabled() : boolean;
		setEnabled(enabled : boolean): void;
		
	}
	
	export interface PolicyTypeBuilder {
		new(): PolicyType;
		decode(buffer: ArrayBuffer) : PolicyType;
		//decode(buffer: NodeBuffer) : PolicyType;
		//decode(buffer: ByteArrayBuffer) : PolicyType;
		decode64(buffer: string) : PolicyType;
		
	}	
}

declare module DeviceMessages {

	export interface ExchangeType extends ProtoBufModel {
		signed_exchange_response?: SignedExchangeResponse;
		getSignedExchangeResponse() : SignedExchangeResponse;
		setSignedExchangeResponse(signedExchangeResponse : SignedExchangeResponse): void;
		withdrawal_coin_name?: string;
		getWithdrawalCoinName() : string;
		setWithdrawalCoinName(withdrawalCoinName : string): void;
		withdrawal_address_n: number[];
		getWithdrawalAddressN() : number[];
		setWithdrawalAddressN(withdrawalAddressN : number[]): void;
		return_address_n: number[];
		getReturnAddressN() : number[];
		setReturnAddressN(returnAddressN : number[]): void;
		
	}
	
	export interface ExchangeTypeBuilder {
		new(): ExchangeType;
		decode(buffer: ArrayBuffer) : ExchangeType;
		//decode(buffer: NodeBuffer) : ExchangeType;
		//decode(buffer: ByteArrayBuffer) : ExchangeType;
		decode64(buffer: string) : ExchangeType;
		
	}	
}

declare module DeviceMessages {

	export interface Initialize extends ProtoBufModel {
		
	}
	
	export interface InitializeBuilder {
		new(): Initialize;
		decode(buffer: ArrayBuffer) : Initialize;
		//decode(buffer: NodeBuffer) : Initialize;
		//decode(buffer: ByteArrayBuffer) : Initialize;
		decode64(buffer: string) : Initialize;
		
	}	
}

declare module DeviceMessages {

	export interface GetFeatures extends ProtoBufModel {
		
	}
	
	export interface GetFeaturesBuilder {
		new(): GetFeatures;
		decode(buffer: ArrayBuffer) : GetFeatures;
		//decode(buffer: NodeBuffer) : GetFeatures;
		//decode(buffer: ByteArrayBuffer) : GetFeatures;
		decode64(buffer: string) : GetFeatures;
		
	}	
}

declare module DeviceMessages {

	export interface Features extends ProtoBufModel {
		vendor?: string;
		getVendor() : string;
		setVendor(vendor : string): void;
		major_version?: number;
		getMajorVersion() : number;
		setMajorVersion(majorVersion : number): void;
		minor_version?: number;
		getMinorVersion() : number;
		setMinorVersion(minorVersion : number): void;
		patch_version?: number;
		getPatchVersion() : number;
		setPatchVersion(patchVersion : number): void;
		bootloader_mode?: boolean;
		getBootloaderMode() : boolean;
		setBootloaderMode(bootloaderMode : boolean): void;
		device_id?: string;
		getDeviceId() : string;
		setDeviceId(deviceId : string): void;
		pin_protection?: boolean;
		getPinProtection() : boolean;
		setPinProtection(pinProtection : boolean): void;
		passphrase_protection?: boolean;
		getPassphraseProtection() : boolean;
		setPassphraseProtection(passphraseProtection : boolean): void;
		language?: string;
		getLanguage() : string;
		setLanguage(language : string): void;
		label?: string;
		getLabel() : string;
		setLabel(label : string): void;
		coins: CoinType[];
		getCoins() : CoinType[];
		setCoins(coins : CoinType[]): void;
		initialized?: boolean;
		getInitialized() : boolean;
		setInitialized(initialized : boolean): void;
		revision?: ByteBuffer;
		getRevision() : ByteBuffer;
		setRevision(revision : ByteBuffer): void;
		bootloader_hash?: ByteBuffer;
		getBootloaderHash() : ByteBuffer;
		setBootloaderHash(bootloaderHash : ByteBuffer): void;
		imported?: boolean;
		getImported() : boolean;
		setImported(imported : boolean): void;
		pin_cached?: boolean;
		getPinCached() : boolean;
		setPinCached(pinCached : boolean): void;
		passphrase_cached?: boolean;
		getPassphraseCached() : boolean;
		setPassphraseCached(passphraseCached : boolean): void;
		policies: PolicyType[];
		getPolicies() : PolicyType[];
		setPolicies(policies : PolicyType[]): void;
		model?: string;
		getModel() : string;
		setModel(model : string): void;
		
	}
	
	export interface FeaturesBuilder {
		new(): Features;
		decode(buffer: ArrayBuffer) : Features;
		//decode(buffer: NodeBuffer) : Features;
		//decode(buffer: ByteArrayBuffer) : Features;
		decode64(buffer: string) : Features;
		
	}	
}

declare module DeviceMessages {

	export interface ClearSession extends ProtoBufModel {
		
	}
	
	export interface ClearSessionBuilder {
		new(): ClearSession;
		decode(buffer: ArrayBuffer) : ClearSession;
		//decode(buffer: NodeBuffer) : ClearSession;
		//decode(buffer: ByteArrayBuffer) : ClearSession;
		decode64(buffer: string) : ClearSession;
		
	}	
}

declare module DeviceMessages {

	export interface ApplySettings extends ProtoBufModel {
		language?: string;
		getLanguage() : string;
		setLanguage(language : string): void;
		label?: string;
		getLabel() : string;
		setLabel(label : string): void;
		use_passphrase?: boolean;
		getUsePassphrase() : boolean;
		setUsePassphrase(usePassphrase : boolean): void;
		
	}
	
	export interface ApplySettingsBuilder {
		new(): ApplySettings;
		decode(buffer: ArrayBuffer) : ApplySettings;
		//decode(buffer: NodeBuffer) : ApplySettings;
		//decode(buffer: ByteArrayBuffer) : ApplySettings;
		decode64(buffer: string) : ApplySettings;
		
	}	
}

declare module DeviceMessages {

	export interface ChangePin extends ProtoBufModel {
		remove?: boolean;
		getRemove() : boolean;
		setRemove(remove : boolean): void;
		
	}
	
	export interface ChangePinBuilder {
		new(): ChangePin;
		decode(buffer: ArrayBuffer) : ChangePin;
		//decode(buffer: NodeBuffer) : ChangePin;
		//decode(buffer: ByteArrayBuffer) : ChangePin;
		decode64(buffer: string) : ChangePin;
		
	}	
}

declare module DeviceMessages {

	export interface Ping extends ProtoBufModel {
		message?: string;
		getMessage() : string;
		setMessage(message : string): void;
		button_protection?: boolean;
		getButtonProtection() : boolean;
		setButtonProtection(buttonProtection : boolean): void;
		pin_protection?: boolean;
		getPinProtection() : boolean;
		setPinProtection(pinProtection : boolean): void;
		passphrase_protection?: boolean;
		getPassphraseProtection() : boolean;
		setPassphraseProtection(passphraseProtection : boolean): void;
		
	}
	
	export interface PingBuilder {
		new(): Ping;
		decode(buffer: ArrayBuffer) : Ping;
		//decode(buffer: NodeBuffer) : Ping;
		//decode(buffer: ByteArrayBuffer) : Ping;
		decode64(buffer: string) : Ping;
		
	}	
}

declare module DeviceMessages {

	export interface Success extends ProtoBufModel {
		message?: string;
		getMessage() : string;
		setMessage(message : string): void;
		
	}
	
	export interface SuccessBuilder {
		new(): Success;
		decode(buffer: ArrayBuffer) : Success;
		//decode(buffer: NodeBuffer) : Success;
		//decode(buffer: ByteArrayBuffer) : Success;
		decode64(buffer: string) : Success;
		
	}	
}

declare module DeviceMessages {

	export interface Failure extends ProtoBufModel {
		code?: FailureType;
		getCode() : FailureType;
		setCode(code : FailureType): void;
		message?: string;
		getMessage() : string;
		setMessage(message : string): void;
		
	}
	
	export interface FailureBuilder {
		new(): Failure;
		decode(buffer: ArrayBuffer) : Failure;
		//decode(buffer: NodeBuffer) : Failure;
		//decode(buffer: ByteArrayBuffer) : Failure;
		decode64(buffer: string) : Failure;
		
	}	
}

declare module DeviceMessages {

	export interface ButtonRequest extends ProtoBufModel {
		code?: ButtonRequestType;
		getCode() : ButtonRequestType;
		setCode(code : ButtonRequestType): void;
		data?: string;
		getData() : string;
		setData(data : string): void;
		
	}
	
	export interface ButtonRequestBuilder {
		new(): ButtonRequest;
		decode(buffer: ArrayBuffer) : ButtonRequest;
		//decode(buffer: NodeBuffer) : ButtonRequest;
		//decode(buffer: ByteArrayBuffer) : ButtonRequest;
		decode64(buffer: string) : ButtonRequest;
		
	}	
}

declare module DeviceMessages {

	export interface ButtonAck extends ProtoBufModel {
		
	}
	
	export interface ButtonAckBuilder {
		new(): ButtonAck;
		decode(buffer: ArrayBuffer) : ButtonAck;
		//decode(buffer: NodeBuffer) : ButtonAck;
		//decode(buffer: ByteArrayBuffer) : ButtonAck;
		decode64(buffer: string) : ButtonAck;
		
	}	
}

declare module DeviceMessages {

	export interface PinMatrixRequest extends ProtoBufModel {
		type?: PinMatrixRequestType;
		getType() : PinMatrixRequestType;
		setType(type : PinMatrixRequestType): void;
		
	}
	
	export interface PinMatrixRequestBuilder {
		new(): PinMatrixRequest;
		decode(buffer: ArrayBuffer) : PinMatrixRequest;
		//decode(buffer: NodeBuffer) : PinMatrixRequest;
		//decode(buffer: ByteArrayBuffer) : PinMatrixRequest;
		decode64(buffer: string) : PinMatrixRequest;
		
	}	
}

declare module DeviceMessages {

	export interface PinMatrixAck extends ProtoBufModel {
		pin: string;
		getPin() : string;
		setPin(pin : string): void;
		
	}
	
	export interface PinMatrixAckBuilder {
		new(): PinMatrixAck;
		decode(buffer: ArrayBuffer) : PinMatrixAck;
		//decode(buffer: NodeBuffer) : PinMatrixAck;
		//decode(buffer: ByteArrayBuffer) : PinMatrixAck;
		decode64(buffer: string) : PinMatrixAck;
		
	}	
}

declare module DeviceMessages {

	export interface Cancel extends ProtoBufModel {
		
	}
	
	export interface CancelBuilder {
		new(): Cancel;
		decode(buffer: ArrayBuffer) : Cancel;
		//decode(buffer: NodeBuffer) : Cancel;
		//decode(buffer: ByteArrayBuffer) : Cancel;
		decode64(buffer: string) : Cancel;
		
	}	
}

declare module DeviceMessages {

	export interface PassphraseRequest extends ProtoBufModel {
		
	}
	
	export interface PassphraseRequestBuilder {
		new(): PassphraseRequest;
		decode(buffer: ArrayBuffer) : PassphraseRequest;
		//decode(buffer: NodeBuffer) : PassphraseRequest;
		//decode(buffer: ByteArrayBuffer) : PassphraseRequest;
		decode64(buffer: string) : PassphraseRequest;
		
	}	
}

declare module DeviceMessages {

	export interface PassphraseAck extends ProtoBufModel {
		passphrase: string;
		getPassphrase() : string;
		setPassphrase(passphrase : string): void;
		
	}
	
	export interface PassphraseAckBuilder {
		new(): PassphraseAck;
		decode(buffer: ArrayBuffer) : PassphraseAck;
		//decode(buffer: NodeBuffer) : PassphraseAck;
		//decode(buffer: ByteArrayBuffer) : PassphraseAck;
		decode64(buffer: string) : PassphraseAck;
		
	}	
}

declare module DeviceMessages {

	export interface GetEntropy extends ProtoBufModel {
		size: number;
		getSize() : number;
		setSize(size : number): void;
		
	}
	
	export interface GetEntropyBuilder {
		new(): GetEntropy;
		decode(buffer: ArrayBuffer) : GetEntropy;
		//decode(buffer: NodeBuffer) : GetEntropy;
		//decode(buffer: ByteArrayBuffer) : GetEntropy;
		decode64(buffer: string) : GetEntropy;
		
	}	
}

declare module DeviceMessages {

	export interface Entropy extends ProtoBufModel {
		entropy: ByteBuffer;
		getEntropy() : ByteBuffer;
		setEntropy(entropy : ByteBuffer): void;
		
	}
	
	export interface EntropyBuilder {
		new(): Entropy;
		decode(buffer: ArrayBuffer) : Entropy;
		//decode(buffer: NodeBuffer) : Entropy;
		//decode(buffer: ByteArrayBuffer) : Entropy;
		decode64(buffer: string) : Entropy;
		
	}	
}

declare module DeviceMessages {

	export interface GetPublicKey extends ProtoBufModel {
		address_n: number[];
		getAddressN() : number[];
		setAddressN(addressN : number[]): void;
		ecdsa_curve_name?: string;
		getEcdsaCurveName() : string;
		setEcdsaCurveName(ecdsaCurveName : string): void;
		show_display?: boolean;
		getShowDisplay() : boolean;
		setShowDisplay(showDisplay : boolean): void;
		
	}
	
	export interface GetPublicKeyBuilder {
		new(): GetPublicKey;
		decode(buffer: ArrayBuffer) : GetPublicKey;
		//decode(buffer: NodeBuffer) : GetPublicKey;
		//decode(buffer: ByteArrayBuffer) : GetPublicKey;
		decode64(buffer: string) : GetPublicKey;
		
	}	
}

declare module DeviceMessages {

	export interface PublicKey extends ProtoBufModel {
		node: HDNodeType;
		getNode() : HDNodeType;
		setNode(node : HDNodeType): void;
		xpub?: string;
		getXpub() : string;
		setXpub(xpub : string): void;
		
	}
	
	export interface PublicKeyBuilder {
		new(): PublicKey;
		decode(buffer: ArrayBuffer) : PublicKey;
		//decode(buffer: NodeBuffer) : PublicKey;
		//decode(buffer: ByteArrayBuffer) : PublicKey;
		decode64(buffer: string) : PublicKey;
		
	}	
}

declare module DeviceMessages {

	export interface GetAddress extends ProtoBufModel {
		address_n: number[];
		getAddressN() : number[];
		setAddressN(addressN : number[]): void;
		coin_name?: string;
		getCoinName() : string;
		setCoinName(coinName : string): void;
		show_display?: boolean;
		getShowDisplay() : boolean;
		setShowDisplay(showDisplay : boolean): void;
		multisig?: MultisigRedeemScriptType;
		getMultisig() : MultisigRedeemScriptType;
		setMultisig(multisig : MultisigRedeemScriptType): void;
		script_type?: InputScriptType;
		getScriptType() : InputScriptType;
		setScriptType(scriptType : InputScriptType): void;
		
	}
	
	export interface GetAddressBuilder {
		new(): GetAddress;
		decode(buffer: ArrayBuffer) : GetAddress;
		//decode(buffer: NodeBuffer) : GetAddress;
		//decode(buffer: ByteArrayBuffer) : GetAddress;
		decode64(buffer: string) : GetAddress;
		
	}	
}

declare module DeviceMessages {

	export interface EthereumGetAddress extends ProtoBufModel {
		address_n: number[];
		getAddressN() : number[];
		setAddressN(addressN : number[]): void;
		show_display?: boolean;
		getShowDisplay() : boolean;
		setShowDisplay(showDisplay : boolean): void;
		
	}
	
	export interface EthereumGetAddressBuilder {
		new(): EthereumGetAddress;
		decode(buffer: ArrayBuffer) : EthereumGetAddress;
		//decode(buffer: NodeBuffer) : EthereumGetAddress;
		//decode(buffer: ByteArrayBuffer) : EthereumGetAddress;
		decode64(buffer: string) : EthereumGetAddress;
		
	}	
}

declare module DeviceMessages {

	export interface Address extends ProtoBufModel {
		address: string;
		getAddress() : string;
		setAddress(address : string): void;
		
	}
	
	export interface AddressBuilder {
		new(): Address;
		decode(buffer: ArrayBuffer) : Address;
		//decode(buffer: NodeBuffer) : Address;
		//decode(buffer: ByteArrayBuffer) : Address;
		decode64(buffer: string) : Address;
		
	}	
}

declare module DeviceMessages {

	export interface EthereumAddress extends ProtoBufModel {
		address: ByteBuffer;
		getAddress() : ByteBuffer;
		setAddress(address : ByteBuffer): void;
		
	}
	
	export interface EthereumAddressBuilder {
		new(): EthereumAddress;
		decode(buffer: ArrayBuffer) : EthereumAddress;
		//decode(buffer: NodeBuffer) : EthereumAddress;
		//decode(buffer: ByteArrayBuffer) : EthereumAddress;
		decode64(buffer: string) : EthereumAddress;
		
	}	
}

declare module DeviceMessages {

	export interface WipeDevice extends ProtoBufModel {
		
	}
	
	export interface WipeDeviceBuilder {
		new(): WipeDevice;
		decode(buffer: ArrayBuffer) : WipeDevice;
		//decode(buffer: NodeBuffer) : WipeDevice;
		//decode(buffer: ByteArrayBuffer) : WipeDevice;
		decode64(buffer: string) : WipeDevice;
		
	}	
}

declare module DeviceMessages {

	export interface LoadDevice extends ProtoBufModel {
		mnemonic?: string;
		getMnemonic() : string;
		setMnemonic(mnemonic : string): void;
		node?: HDNodeType;
		getNode() : HDNodeType;
		setNode(node : HDNodeType): void;
		pin?: string;
		getPin() : string;
		setPin(pin : string): void;
		passphrase_protection?: boolean;
		getPassphraseProtection() : boolean;
		setPassphraseProtection(passphraseProtection : boolean): void;
		language?: string;
		getLanguage() : string;
		setLanguage(language : string): void;
		label?: string;
		getLabel() : string;
		setLabel(label : string): void;
		skip_checksum?: boolean;
		getSkipChecksum() : boolean;
		setSkipChecksum(skipChecksum : boolean): void;
		
	}
	
	export interface LoadDeviceBuilder {
		new(): LoadDevice;
		decode(buffer: ArrayBuffer) : LoadDevice;
		//decode(buffer: NodeBuffer) : LoadDevice;
		//decode(buffer: ByteArrayBuffer) : LoadDevice;
		decode64(buffer: string) : LoadDevice;
		
	}	
}

declare module DeviceMessages {

	export interface ResetDevice extends ProtoBufModel {
		display_random?: boolean;
		getDisplayRandom() : boolean;
		setDisplayRandom(displayRandom : boolean): void;
		strength?: number;
		getStrength() : number;
		setStrength(strength : number): void;
		passphrase_protection?: boolean;
		getPassphraseProtection() : boolean;
		setPassphraseProtection(passphraseProtection : boolean): void;
		pin_protection?: boolean;
		getPinProtection() : boolean;
		setPinProtection(pinProtection : boolean): void;
		language?: string;
		getLanguage() : string;
		setLanguage(language : string): void;
		label?: string;
		getLabel() : string;
		setLabel(label : string): void;
		
	}
	
	export interface ResetDeviceBuilder {
		new(): ResetDevice;
		decode(buffer: ArrayBuffer) : ResetDevice;
		//decode(buffer: NodeBuffer) : ResetDevice;
		//decode(buffer: ByteArrayBuffer) : ResetDevice;
		decode64(buffer: string) : ResetDevice;
		
	}	
}

declare module DeviceMessages {

	export interface EntropyRequest extends ProtoBufModel {
		
	}
	
	export interface EntropyRequestBuilder {
		new(): EntropyRequest;
		decode(buffer: ArrayBuffer) : EntropyRequest;
		//decode(buffer: NodeBuffer) : EntropyRequest;
		//decode(buffer: ByteArrayBuffer) : EntropyRequest;
		decode64(buffer: string) : EntropyRequest;
		
	}	
}

declare module DeviceMessages {

	export interface EntropyAck extends ProtoBufModel {
		entropy?: ByteBuffer;
		getEntropy() : ByteBuffer;
		setEntropy(entropy : ByteBuffer): void;
		
	}
	
	export interface EntropyAckBuilder {
		new(): EntropyAck;
		decode(buffer: ArrayBuffer) : EntropyAck;
		//decode(buffer: NodeBuffer) : EntropyAck;
		//decode(buffer: ByteArrayBuffer) : EntropyAck;
		decode64(buffer: string) : EntropyAck;
		
	}	
}

declare module DeviceMessages {

	export interface RecoveryDevice extends ProtoBufModel {
		word_count?: number;
		getWordCount() : number;
		setWordCount(wordCount : number): void;
		passphrase_protection?: boolean;
		getPassphraseProtection() : boolean;
		setPassphraseProtection(passphraseProtection : boolean): void;
		pin_protection?: boolean;
		getPinProtection() : boolean;
		setPinProtection(pinProtection : boolean): void;
		language?: string;
		getLanguage() : string;
		setLanguage(language : string): void;
		label?: string;
		getLabel() : string;
		setLabel(label : string): void;
		enforce_wordlist?: boolean;
		getEnforceWordlist() : boolean;
		setEnforceWordlist(enforceWordlist : boolean): void;
		use_character_cipher?: boolean;
		getUseCharacterCipher() : boolean;
		setUseCharacterCipher(useCharacterCipher : boolean): void;
		
	}
	
	export interface RecoveryDeviceBuilder {
		new(): RecoveryDevice;
		decode(buffer: ArrayBuffer) : RecoveryDevice;
		//decode(buffer: NodeBuffer) : RecoveryDevice;
		//decode(buffer: ByteArrayBuffer) : RecoveryDevice;
		decode64(buffer: string) : RecoveryDevice;
		
	}	
}

declare module DeviceMessages {

	export interface WordRequest extends ProtoBufModel {
		
	}
	
	export interface WordRequestBuilder {
		new(): WordRequest;
		decode(buffer: ArrayBuffer) : WordRequest;
		//decode(buffer: NodeBuffer) : WordRequest;
		//decode(buffer: ByteArrayBuffer) : WordRequest;
		decode64(buffer: string) : WordRequest;
		
	}	
}

declare module DeviceMessages {

	export interface WordAck extends ProtoBufModel {
		word: string;
		getWord() : string;
		setWord(word : string): void;
		
	}
	
	export interface WordAckBuilder {
		new(): WordAck;
		decode(buffer: ArrayBuffer) : WordAck;
		//decode(buffer: NodeBuffer) : WordAck;
		//decode(buffer: ByteArrayBuffer) : WordAck;
		decode64(buffer: string) : WordAck;
		
	}	
}

declare module DeviceMessages {

	export interface CharacterRequest extends ProtoBufModel {
		word_pos: number;
		getWordPos() : number;
		setWordPos(wordPos : number): void;
		character_pos: number;
		getCharacterPos() : number;
		setCharacterPos(characterPos : number): void;
		
	}
	
	export interface CharacterRequestBuilder {
		new(): CharacterRequest;
		decode(buffer: ArrayBuffer) : CharacterRequest;
		//decode(buffer: NodeBuffer) : CharacterRequest;
		//decode(buffer: ByteArrayBuffer) : CharacterRequest;
		decode64(buffer: string) : CharacterRequest;
		
	}	
}

declare module DeviceMessages {

	export interface CharacterAck extends ProtoBufModel {
		character?: string;
		getCharacter() : string;
		setCharacter(character : string): void;
		isDelete?: boolean;
		getDelete() : boolean;
		setDelete(isDelete : boolean): void;
		done?: boolean;
		getDone() : boolean;
		setDone(done : boolean): void;
		
	}
	
	export interface CharacterAckBuilder {
		new(): CharacterAck;
		decode(buffer: ArrayBuffer) : CharacterAck;
		//decode(buffer: NodeBuffer) : CharacterAck;
		//decode(buffer: ByteArrayBuffer) : CharacterAck;
		decode64(buffer: string) : CharacterAck;
		
	}	
}

declare module DeviceMessages {

	export interface SignMessage extends ProtoBufModel {
		address_n: number[];
		getAddressN() : number[];
		setAddressN(addressN : number[]): void;
		message: ByteBuffer;
		getMessage() : ByteBuffer;
		setMessage(message : ByteBuffer): void;
		coin_name?: string;
		getCoinName() : string;
		setCoinName(coinName : string): void;
		
	}
	
	export interface SignMessageBuilder {
		new(): SignMessage;
		decode(buffer: ArrayBuffer) : SignMessage;
		//decode(buffer: NodeBuffer) : SignMessage;
		//decode(buffer: ByteArrayBuffer) : SignMessage;
		decode64(buffer: string) : SignMessage;
		
	}	
}

declare module DeviceMessages {

	export interface VerifyMessage extends ProtoBufModel {
		address?: string;
		getAddress() : string;
		setAddress(address : string): void;
		signature?: ByteBuffer;
		getSignature() : ByteBuffer;
		setSignature(signature : ByteBuffer): void;
		message?: ByteBuffer;
		getMessage() : ByteBuffer;
		setMessage(message : ByteBuffer): void;
		coin_name?: string;
		getCoinName() : string;
		setCoinName(coinName : string): void;
		
	}
	
	export interface VerifyMessageBuilder {
		new(): VerifyMessage;
		decode(buffer: ArrayBuffer) : VerifyMessage;
		//decode(buffer: NodeBuffer) : VerifyMessage;
		//decode(buffer: ByteArrayBuffer) : VerifyMessage;
		decode64(buffer: string) : VerifyMessage;
		
	}	
}

declare module DeviceMessages {

	export interface MessageSignature extends ProtoBufModel {
		address?: string;
		getAddress() : string;
		setAddress(address : string): void;
		signature?: ByteBuffer;
		getSignature() : ByteBuffer;
		setSignature(signature : ByteBuffer): void;
		
	}
	
	export interface MessageSignatureBuilder {
		new(): MessageSignature;
		decode(buffer: ArrayBuffer) : MessageSignature;
		//decode(buffer: NodeBuffer) : MessageSignature;
		//decode(buffer: ByteArrayBuffer) : MessageSignature;
		decode64(buffer: string) : MessageSignature;
		
	}	
}

declare module DeviceMessages {

	export interface EncryptMessage extends ProtoBufModel {
		pubkey?: ByteBuffer;
		getPubkey() : ByteBuffer;
		setPubkey(pubkey : ByteBuffer): void;
		message?: ByteBuffer;
		getMessage() : ByteBuffer;
		setMessage(message : ByteBuffer): void;
		display_only?: boolean;
		getDisplayOnly() : boolean;
		setDisplayOnly(displayOnly : boolean): void;
		address_n: number[];
		getAddressN() : number[];
		setAddressN(addressN : number[]): void;
		coin_name?: string;
		getCoinName() : string;
		setCoinName(coinName : string): void;
		
	}
	
	export interface EncryptMessageBuilder {
		new(): EncryptMessage;
		decode(buffer: ArrayBuffer) : EncryptMessage;
		//decode(buffer: NodeBuffer) : EncryptMessage;
		//decode(buffer: ByteArrayBuffer) : EncryptMessage;
		decode64(buffer: string) : EncryptMessage;
		
	}	
}

declare module DeviceMessages {

	export interface EncryptedMessage extends ProtoBufModel {
		nonce?: ByteBuffer;
		getNonce() : ByteBuffer;
		setNonce(nonce : ByteBuffer): void;
		message?: ByteBuffer;
		getMessage() : ByteBuffer;
		setMessage(message : ByteBuffer): void;
		hmac?: ByteBuffer;
		getHmac() : ByteBuffer;
		setHmac(hmac : ByteBuffer): void;
		
	}
	
	export interface EncryptedMessageBuilder {
		new(): EncryptedMessage;
		decode(buffer: ArrayBuffer) : EncryptedMessage;
		//decode(buffer: NodeBuffer) : EncryptedMessage;
		//decode(buffer: ByteArrayBuffer) : EncryptedMessage;
		decode64(buffer: string) : EncryptedMessage;
		
	}	
}

declare module DeviceMessages {

	export interface DecryptMessage extends ProtoBufModel {
		address_n: number[];
		getAddressN() : number[];
		setAddressN(addressN : number[]): void;
		nonce?: ByteBuffer;
		getNonce() : ByteBuffer;
		setNonce(nonce : ByteBuffer): void;
		message?: ByteBuffer;
		getMessage() : ByteBuffer;
		setMessage(message : ByteBuffer): void;
		hmac?: ByteBuffer;
		getHmac() : ByteBuffer;
		setHmac(hmac : ByteBuffer): void;
		
	}
	
	export interface DecryptMessageBuilder {
		new(): DecryptMessage;
		decode(buffer: ArrayBuffer) : DecryptMessage;
		//decode(buffer: NodeBuffer) : DecryptMessage;
		//decode(buffer: ByteArrayBuffer) : DecryptMessage;
		decode64(buffer: string) : DecryptMessage;
		
	}	
}

declare module DeviceMessages {

	export interface DecryptedMessage extends ProtoBufModel {
		message?: ByteBuffer;
		getMessage() : ByteBuffer;
		setMessage(message : ByteBuffer): void;
		address?: string;
		getAddress() : string;
		setAddress(address : string): void;
		
	}
	
	export interface DecryptedMessageBuilder {
		new(): DecryptedMessage;
		decode(buffer: ArrayBuffer) : DecryptedMessage;
		//decode(buffer: NodeBuffer) : DecryptedMessage;
		//decode(buffer: ByteArrayBuffer) : DecryptedMessage;
		decode64(buffer: string) : DecryptedMessage;
		
	}	
}

declare module DeviceMessages {

	export interface CipherKeyValue extends ProtoBufModel {
		address_n: number[];
		getAddressN() : number[];
		setAddressN(addressN : number[]): void;
		key?: string;
		getKey() : string;
		setKey(key : string): void;
		value?: ByteBuffer;
		getValue() : ByteBuffer;
		setValue(value : ByteBuffer): void;
		encrypt?: boolean;
		getEncrypt() : boolean;
		setEncrypt(encrypt : boolean): void;
		ask_on_encrypt?: boolean;
		getAskOnEncrypt() : boolean;
		setAskOnEncrypt(askOnEncrypt : boolean): void;
		ask_on_decrypt?: boolean;
		getAskOnDecrypt() : boolean;
		setAskOnDecrypt(askOnDecrypt : boolean): void;
		iv?: ByteBuffer;
		getIv() : ByteBuffer;
		setIv(iv : ByteBuffer): void;
		
	}
	
	export interface CipherKeyValueBuilder {
		new(): CipherKeyValue;
		decode(buffer: ArrayBuffer) : CipherKeyValue;
		//decode(buffer: NodeBuffer) : CipherKeyValue;
		//decode(buffer: ByteArrayBuffer) : CipherKeyValue;
		decode64(buffer: string) : CipherKeyValue;
		
	}	
}

declare module DeviceMessages {

	export interface CipheredKeyValue extends ProtoBufModel {
		value?: ByteBuffer;
		getValue() : ByteBuffer;
		setValue(value : ByteBuffer): void;
		
	}
	
	export interface CipheredKeyValueBuilder {
		new(): CipheredKeyValue;
		decode(buffer: ArrayBuffer) : CipheredKeyValue;
		//decode(buffer: NodeBuffer) : CipheredKeyValue;
		//decode(buffer: ByteArrayBuffer) : CipheredKeyValue;
		decode64(buffer: string) : CipheredKeyValue;
		
	}	
}

declare module DeviceMessages {

	export interface EstimateTxSize extends ProtoBufModel {
		outputs_count: number;
		getOutputsCount() : number;
		setOutputsCount(outputsCount : number): void;
		inputs_count: number;
		getInputsCount() : number;
		setInputsCount(inputsCount : number): void;
		coin_name?: string;
		getCoinName() : string;
		setCoinName(coinName : string): void;
		
	}
	
	export interface EstimateTxSizeBuilder {
		new(): EstimateTxSize;
		decode(buffer: ArrayBuffer) : EstimateTxSize;
		//decode(buffer: NodeBuffer) : EstimateTxSize;
		//decode(buffer: ByteArrayBuffer) : EstimateTxSize;
		decode64(buffer: string) : EstimateTxSize;
		
	}	
}

declare module DeviceMessages {

	export interface TxSize extends ProtoBufModel {
		tx_size?: number;
		getTxSize() : number;
		setTxSize(txSize : number): void;
		
	}
	
	export interface TxSizeBuilder {
		new(): TxSize;
		decode(buffer: ArrayBuffer) : TxSize;
		//decode(buffer: NodeBuffer) : TxSize;
		//decode(buffer: ByteArrayBuffer) : TxSize;
		decode64(buffer: string) : TxSize;
		
	}	
}

declare module DeviceMessages {

	export interface SignTx extends ProtoBufModel {
		outputs_count: number;
		getOutputsCount() : number;
		setOutputsCount(outputsCount : number): void;
		inputs_count: number;
		getInputsCount() : number;
		setInputsCount(inputsCount : number): void;
		coin_name?: string;
		getCoinName() : string;
		setCoinName(coinName : string): void;
		version?: number;
		getVersion() : number;
		setVersion(version : number): void;
		lock_time?: number;
		getLockTime() : number;
		setLockTime(lockTime : number): void;
		
	}
	
	export interface SignTxBuilder {
		new(): SignTx;
		decode(buffer: ArrayBuffer) : SignTx;
		//decode(buffer: NodeBuffer) : SignTx;
		//decode(buffer: ByteArrayBuffer) : SignTx;
		decode64(buffer: string) : SignTx;
		
	}	
}

declare module DeviceMessages {

	export interface SimpleSignTx extends ProtoBufModel {
		inputs: TxInputType[];
		getInputs() : TxInputType[];
		setInputs(inputs : TxInputType[]): void;
		outputs: TxOutputType[];
		getOutputs() : TxOutputType[];
		setOutputs(outputs : TxOutputType[]): void;
		transactions: TransactionType[];
		getTransactions() : TransactionType[];
		setTransactions(transactions : TransactionType[]): void;
		coin_name?: string;
		getCoinName() : string;
		setCoinName(coinName : string): void;
		version?: number;
		getVersion() : number;
		setVersion(version : number): void;
		lock_time?: number;
		getLockTime() : number;
		setLockTime(lockTime : number): void;
		
	}
	
	export interface SimpleSignTxBuilder {
		new(): SimpleSignTx;
		decode(buffer: ArrayBuffer) : SimpleSignTx;
		//decode(buffer: NodeBuffer) : SimpleSignTx;
		//decode(buffer: ByteArrayBuffer) : SimpleSignTx;
		decode64(buffer: string) : SimpleSignTx;
		
	}	
}

declare module DeviceMessages {

	export interface TxRequest extends ProtoBufModel {
		request_type?: RequestType;
		getRequestType() : RequestType;
		setRequestType(requestType : RequestType): void;
		details?: TxRequestDetailsType;
		getDetails() : TxRequestDetailsType;
		setDetails(details : TxRequestDetailsType): void;
		serialized?: TxRequestSerializedType;
		getSerialized() : TxRequestSerializedType;
		setSerialized(serialized : TxRequestSerializedType): void;
		
	}
	
	export interface TxRequestBuilder {
		new(): TxRequest;
		decode(buffer: ArrayBuffer) : TxRequest;
		//decode(buffer: NodeBuffer) : TxRequest;
		//decode(buffer: ByteArrayBuffer) : TxRequest;
		decode64(buffer: string) : TxRequest;
		
	}	
}

declare module DeviceMessages {

	export interface TxAck extends ProtoBufModel {
		tx?: TransactionType;
		getTx() : TransactionType;
		setTx(tx : TransactionType): void;
		
	}
	
	export interface TxAckBuilder {
		new(): TxAck;
		decode(buffer: ArrayBuffer) : TxAck;
		//decode(buffer: NodeBuffer) : TxAck;
		//decode(buffer: ByteArrayBuffer) : TxAck;
		decode64(buffer: string) : TxAck;
		
	}	
}

declare module DeviceMessages {

	export interface RawTxAck extends ProtoBufModel {
		tx?: RawTransactionType;
		getTx() : RawTransactionType;
		setTx(tx : RawTransactionType): void;
		
	}
	
	export interface RawTxAckBuilder {
		new(): RawTxAck;
		decode(buffer: ArrayBuffer) : RawTxAck;
		//decode(buffer: NodeBuffer) : RawTxAck;
		//decode(buffer: ByteArrayBuffer) : RawTxAck;
		decode64(buffer: string) : RawTxAck;
		
	}	
}

declare module DeviceMessages {

	export interface EthereumSignTx extends ProtoBufModel {
		address_n: number[];
		getAddressN() : number[];
		setAddressN(addressN : number[]): void;
		nonce?: ByteBuffer;
		getNonce() : ByteBuffer;
		setNonce(nonce : ByteBuffer): void;
		gas_price?: ByteBuffer;
		getGasPrice() : ByteBuffer;
		setGasPrice(gasPrice : ByteBuffer): void;
		gas_limit?: ByteBuffer;
		getGasLimit() : ByteBuffer;
		setGasLimit(gasLimit : ByteBuffer): void;
		to?: ByteBuffer;
		getTo() : ByteBuffer;
		setTo(to : ByteBuffer): void;
		value?: ByteBuffer;
		getValue() : ByteBuffer;
		setValue(value : ByteBuffer): void;
		data_initial_chunk?: ByteBuffer;
		getDataInitialChunk() : ByteBuffer;
		setDataInitialChunk(dataInitialChunk : ByteBuffer): void;
		data_length?: number;
		getDataLength() : number;
		setDataLength(dataLength : number): void;
		to_address_n: number[];
		getToAddressN() : number[];
		setToAddressN(toAddressN : number[]): void;
		address_type?: OutputAddressType;
		getAddressType() : OutputAddressType;
		setAddressType(addressType : OutputAddressType): void;
		exchange_type?: ExchangeType;
		getExchangeType() : ExchangeType;
		setExchangeType(exchangeType : ExchangeType): void;
		chain_id?: number;
		getChainId() : number;
		setChainId(chainId : number): void;
		token_value?: ByteBuffer;
		getTokenValue() : ByteBuffer;
		setTokenValue(tokenValue : ByteBuffer): void;
		token_to?: ByteBuffer;
		getTokenTo() : ByteBuffer;
		setTokenTo(tokenTo : ByteBuffer): void;
		token_shortcut?: string;
		getTokenShortcut() : string;
		setTokenShortcut(tokenShortcut : string): void;
		
	}
	
	export interface EthereumSignTxBuilder {
		new(): EthereumSignTx;
		decode(buffer: ArrayBuffer) : EthereumSignTx;
		//decode(buffer: NodeBuffer) : EthereumSignTx;
		//decode(buffer: ByteArrayBuffer) : EthereumSignTx;
		decode64(buffer: string) : EthereumSignTx;
		
	}	
}

declare module DeviceMessages {

	export interface EthereumTxRequest extends ProtoBufModel {
		data_length?: number;
		getDataLength() : number;
		setDataLength(dataLength : number): void;
		signature_v?: number;
		getSignatureV() : number;
		setSignatureV(signatureV : number): void;
		signature_r?: ByteBuffer;
		getSignatureR() : ByteBuffer;
		setSignatureR(signatureR : ByteBuffer): void;
		signature_s?: ByteBuffer;
		getSignatureS() : ByteBuffer;
		setSignatureS(signatureS : ByteBuffer): void;
		hash?: ByteBuffer;
		getHash() : ByteBuffer;
		setHash(hash : ByteBuffer): void;
		signature_der?: ByteBuffer;
		getSignatureDer() : ByteBuffer;
		setSignatureDer(signatureDer : ByteBuffer): void;
		
	}
	
	export interface EthereumTxRequestBuilder {
		new(): EthereumTxRequest;
		decode(buffer: ArrayBuffer) : EthereumTxRequest;
		//decode(buffer: NodeBuffer) : EthereumTxRequest;
		//decode(buffer: ByteArrayBuffer) : EthereumTxRequest;
		decode64(buffer: string) : EthereumTxRequest;
		
	}	
}

declare module DeviceMessages {

	export interface EthereumTxAck extends ProtoBufModel {
		data_chunk?: ByteBuffer;
		getDataChunk() : ByteBuffer;
		setDataChunk(dataChunk : ByteBuffer): void;
		
	}
	
	export interface EthereumTxAckBuilder {
		new(): EthereumTxAck;
		decode(buffer: ArrayBuffer) : EthereumTxAck;
		//decode(buffer: NodeBuffer) : EthereumTxAck;
		//decode(buffer: ByteArrayBuffer) : EthereumTxAck;
		decode64(buffer: string) : EthereumTxAck;
		
	}	
}

declare module DeviceMessages {

	export interface SignIdentity extends ProtoBufModel {
		identity?: IdentityType;
		getIdentity() : IdentityType;
		setIdentity(identity : IdentityType): void;
		challenge_hidden?: ByteBuffer;
		getChallengeHidden() : ByteBuffer;
		setChallengeHidden(challengeHidden : ByteBuffer): void;
		challenge_visual?: string;
		getChallengeVisual() : string;
		setChallengeVisual(challengeVisual : string): void;
		ecdsa_curve_name?: string;
		getEcdsaCurveName() : string;
		setEcdsaCurveName(ecdsaCurveName : string): void;
		
	}
	
	export interface SignIdentityBuilder {
		new(): SignIdentity;
		decode(buffer: ArrayBuffer) : SignIdentity;
		//decode(buffer: NodeBuffer) : SignIdentity;
		//decode(buffer: ByteArrayBuffer) : SignIdentity;
		decode64(buffer: string) : SignIdentity;
		
	}	
}

declare module DeviceMessages {

	export interface SignedIdentity extends ProtoBufModel {
		address?: string;
		getAddress() : string;
		setAddress(address : string): void;
		public_key?: ByteBuffer;
		getPublicKey() : ByteBuffer;
		setPublicKey(publicKey : ByteBuffer): void;
		signature?: ByteBuffer;
		getSignature() : ByteBuffer;
		setSignature(signature : ByteBuffer): void;
		
	}
	
	export interface SignedIdentityBuilder {
		new(): SignedIdentity;
		decode(buffer: ArrayBuffer) : SignedIdentity;
		//decode(buffer: NodeBuffer) : SignedIdentity;
		//decode(buffer: ByteArrayBuffer) : SignedIdentity;
		decode64(buffer: string) : SignedIdentity;
		
	}	
}

declare module DeviceMessages {

	export interface ApplyPolicies extends ProtoBufModel {
		policy: PolicyType[];
		getPolicy() : PolicyType[];
		setPolicy(policy : PolicyType[]): void;
		
	}
	
	export interface ApplyPoliciesBuilder {
		new(): ApplyPolicies;
		decode(buffer: ArrayBuffer) : ApplyPolicies;
		//decode(buffer: NodeBuffer) : ApplyPolicies;
		//decode(buffer: ByteArrayBuffer) : ApplyPolicies;
		decode64(buffer: string) : ApplyPolicies;
		
	}	
}

declare module DeviceMessages {

	export interface FirmwareErase extends ProtoBufModel {
		
	}
	
	export interface FirmwareEraseBuilder {
		new(): FirmwareErase;
		decode(buffer: ArrayBuffer) : FirmwareErase;
		//decode(buffer: NodeBuffer) : FirmwareErase;
		//decode(buffer: ByteArrayBuffer) : FirmwareErase;
		decode64(buffer: string) : FirmwareErase;
		
	}	
}

declare module DeviceMessages {

	export interface FirmwareUpload extends ProtoBufModel {
		payload_hash: ByteBuffer;
		getPayloadHash() : ByteBuffer;
		setPayloadHash(payloadHash : ByteBuffer): void;
		payload: ByteBuffer;
		getPayload() : ByteBuffer;
		setPayload(payload : ByteBuffer): void;
		
	}
	
	export interface FirmwareUploadBuilder {
		new(): FirmwareUpload;
		decode(buffer: ArrayBuffer) : FirmwareUpload;
		//decode(buffer: NodeBuffer) : FirmwareUpload;
		//decode(buffer: ByteArrayBuffer) : FirmwareUpload;
		decode64(buffer: string) : FirmwareUpload;
		
	}	
}

declare module DeviceMessages {

	export interface DebugLinkDecision extends ProtoBufModel {
		yes_no: boolean;
		getYesNo() : boolean;
		setYesNo(yesNo : boolean): void;
		
	}
	
	export interface DebugLinkDecisionBuilder {
		new(): DebugLinkDecision;
		decode(buffer: ArrayBuffer) : DebugLinkDecision;
		//decode(buffer: NodeBuffer) : DebugLinkDecision;
		//decode(buffer: ByteArrayBuffer) : DebugLinkDecision;
		decode64(buffer: string) : DebugLinkDecision;
		
	}	
}

declare module DeviceMessages {

	export interface DebugLinkGetState extends ProtoBufModel {
		
	}
	
	export interface DebugLinkGetStateBuilder {
		new(): DebugLinkGetState;
		decode(buffer: ArrayBuffer) : DebugLinkGetState;
		//decode(buffer: NodeBuffer) : DebugLinkGetState;
		//decode(buffer: ByteArrayBuffer) : DebugLinkGetState;
		decode64(buffer: string) : DebugLinkGetState;
		
	}	
}

declare module DeviceMessages {

	export interface DebugLinkState extends ProtoBufModel {
		layout?: ByteBuffer;
		getLayout() : ByteBuffer;
		setLayout(layout : ByteBuffer): void;
		pin?: string;
		getPin() : string;
		setPin(pin : string): void;
		matrix?: string;
		getMatrix() : string;
		setMatrix(matrix : string): void;
		mnemonic?: string;
		getMnemonic() : string;
		setMnemonic(mnemonic : string): void;
		node?: HDNodeType;
		getNode() : HDNodeType;
		setNode(node : HDNodeType): void;
		passphrase_protection?: boolean;
		getPassphraseProtection() : boolean;
		setPassphraseProtection(passphraseProtection : boolean): void;
		reset_word?: string;
		getResetWord() : string;
		setResetWord(resetWord : string): void;
		reset_entropy?: ByteBuffer;
		getResetEntropy() : ByteBuffer;
		setResetEntropy(resetEntropy : ByteBuffer): void;
		recovery_fake_word?: string;
		getRecoveryFakeWord() : string;
		setRecoveryFakeWord(recoveryFakeWord : string): void;
		recovery_word_pos?: number;
		getRecoveryWordPos() : number;
		setRecoveryWordPos(recoveryWordPos : number): void;
		recovery_cipher?: string;
		getRecoveryCipher() : string;
		setRecoveryCipher(recoveryCipher : string): void;
		recovery_auto_completed_word?: string;
		getRecoveryAutoCompletedWord() : string;
		setRecoveryAutoCompletedWord(recoveryAutoCompletedWord : string): void;
		firmware_hash?: ByteBuffer;
		getFirmwareHash() : ByteBuffer;
		setFirmwareHash(firmwareHash : ByteBuffer): void;
		storage_hash?: ByteBuffer;
		getStorageHash() : ByteBuffer;
		setStorageHash(storageHash : ByteBuffer): void;
		
	}
	
	export interface DebugLinkStateBuilder {
		new(): DebugLinkState;
		decode(buffer: ArrayBuffer) : DebugLinkState;
		//decode(buffer: NodeBuffer) : DebugLinkState;
		//decode(buffer: ByteArrayBuffer) : DebugLinkState;
		decode64(buffer: string) : DebugLinkState;
		
	}	
}

declare module DeviceMessages {

	export interface DebugLinkStop extends ProtoBufModel {
		
	}
	
	export interface DebugLinkStopBuilder {
		new(): DebugLinkStop;
		decode(buffer: ArrayBuffer) : DebugLinkStop;
		//decode(buffer: NodeBuffer) : DebugLinkStop;
		//decode(buffer: ByteArrayBuffer) : DebugLinkStop;
		decode64(buffer: string) : DebugLinkStop;
		
	}	
}

declare module DeviceMessages {

	export interface DebugLinkLog extends ProtoBufModel {
		level?: number;
		getLevel() : number;
		setLevel(level : number): void;
		bucket?: string;
		getBucket() : string;
		setBucket(bucket : string): void;
		text?: string;
		getText() : string;
		setText(text : string): void;
		
	}
	
	export interface DebugLinkLogBuilder {
		new(): DebugLinkLog;
		decode(buffer: ArrayBuffer) : DebugLinkLog;
		//decode(buffer: NodeBuffer) : DebugLinkLog;
		//decode(buffer: ByteArrayBuffer) : DebugLinkLog;
		decode64(buffer: string) : DebugLinkLog;
		
	}	
}

declare module DeviceMessages {

	export interface DebugLinkFillConfig extends ProtoBufModel {
		
	}
	
	export interface DebugLinkFillConfigBuilder {
		new(): DebugLinkFillConfig;
		decode(buffer: ArrayBuffer) : DebugLinkFillConfig;
		//decode(buffer: NodeBuffer) : DebugLinkFillConfig;
		//decode(buffer: ByteArrayBuffer) : DebugLinkFillConfig;
		decode64(buffer: string) : DebugLinkFillConfig;
		
	}	
}

declare module DeviceMessages {
	export const enum FailureType {
		Failure_UnexpectedMessage = 1,
		Failure_ButtonExpected = 2,
		Failure_SyntaxError = 3,
		Failure_ActionCancelled = 4,
		Failure_PinExpected = 5,
		Failure_PinCancelled = 6,
		Failure_PinInvalid = 7,
		Failure_InvalidSignature = 8,
		Failure_Other = 9,
		Failure_NotEnoughFunds = 10,
		Failure_NotInitialized = 11,
		Failure_FirmwareError = 99,
		
	}
}

declare module DeviceMessages {
	export const enum OutputScriptType {
		PAYTOADDRESS = 0,
		PAYTOSCRIPTHASH = 1,
		PAYTOMULTISIG = 2,
		PAYTOOPRETURN = 3,
		PAYTOWITNESS = 4,
		PAYTOP2SHWITNESS = 5,
		
	}
}

declare module DeviceMessages {
	export const enum InputScriptType {
		SPENDADDRESS = 0,
		SPENDMULTISIG = 1,
		EXTERNAL = 2,
		SPENDWITNESS = 3,
		SPENDP2SHWITNESS = 4,
		
	}
}

declare module DeviceMessages {
	export const enum RequestType {
		TXINPUT = 0,
		TXOUTPUT = 1,
		TXMETA = 2,
		TXFINISHED = 3,
		TXEXTRADATA = 4,
		
	}
}

declare module DeviceMessages {
	export const enum OutputAddressType {
		SPEND = 0,
		TRANSFER = 1,
		CHANGE = 2,
		EXCHANGE = 3,
		
	}
}

declare module DeviceMessages {
	export const enum ButtonRequestType {
		ButtonRequest_Other = 1,
		ButtonRequest_FeeOverThreshold = 2,
		ButtonRequest_ConfirmOutput = 3,
		ButtonRequest_ResetDevice = 4,
		ButtonRequest_ConfirmWord = 5,
		ButtonRequest_WipeDevice = 6,
		ButtonRequest_ProtectCall = 7,
		ButtonRequest_SignTx = 8,
		ButtonRequest_FirmwareCheck = 9,
		ButtonRequest_Address = 10,
		ButtonRequest_FirmwareErase = 11,
		ButtonRequest_ConfirmTransferToAccount = 12,
		ButtonRequest_ConfirmTransferToNodePath = 13,
		ButtonRequest_ChangeLabel = 14,
		ButtonRequest_ChangeLanguage = 15,
		ButtonRequest_EnablePassphrase = 16,
		ButtonRequest_DisablePassphrase = 17,
		ButtonRequest_EncryptAndSignMessage = 18,
		ButtonRequest_EncryptMessage = 19,
		ButtonRequest_ImportPrivateKey = 20,
		ButtonRequest_ImportRecoverySentence = 21,
		ButtonRequest_SignIdentity = 22,
		ButtonRequest_Ping = 23,
		ButtonRequest_RemovePin = 24,
		ButtonRequest_ChangePin = 25,
		ButtonRequest_CreatePin = 26,
		ButtonRequest_GetEntropy = 27,
		ButtonRequest_SignMessage = 28,
		ButtonRequest_ApplyPolicies = 29,
		ButtonRequest_SignExchange = 30,
		
	}
}

declare module DeviceMessages {
	export const enum PinMatrixRequestType {
		PinMatrixRequestType_Current = 1,
		PinMatrixRequestType_NewFirst = 2,
		PinMatrixRequestType_NewSecond = 3,
		
	}
}

declare module DeviceMessages {
	export const enum MessageType {
		MessageType_Initialize = 0,
		MessageType_Ping = 1,
		MessageType_Success = 2,
		MessageType_Failure = 3,
		MessageType_ChangePin = 4,
		MessageType_WipeDevice = 5,
		MessageType_FirmwareErase = 6,
		MessageType_FirmwareUpload = 7,
		MessageType_GetEntropy = 9,
		MessageType_Entropy = 10,
		MessageType_GetPublicKey = 11,
		MessageType_PublicKey = 12,
		MessageType_LoadDevice = 13,
		MessageType_ResetDevice = 14,
		MessageType_SignTx = 15,
		MessageType_SimpleSignTx = 16,
		MessageType_Features = 17,
		MessageType_PinMatrixRequest = 18,
		MessageType_PinMatrixAck = 19,
		MessageType_Cancel = 20,
		MessageType_TxRequest = 21,
		MessageType_TxAck = 22,
		MessageType_CipherKeyValue = 23,
		MessageType_ClearSession = 24,
		MessageType_ApplySettings = 25,
		MessageType_ButtonRequest = 26,
		MessageType_ButtonAck = 27,
		MessageType_GetAddress = 29,
		MessageType_Address = 30,
		MessageType_EntropyRequest = 35,
		MessageType_EntropyAck = 36,
		MessageType_SignMessage = 38,
		MessageType_VerifyMessage = 39,
		MessageType_MessageSignature = 40,
		MessageType_PassphraseRequest = 41,
		MessageType_PassphraseAck = 42,
		MessageType_EstimateTxSize = 43,
		MessageType_TxSize = 44,
		MessageType_RecoveryDevice = 45,
		MessageType_WordRequest = 46,
		MessageType_WordAck = 47,
		MessageType_CipheredKeyValue = 48,
		MessageType_EncryptMessage = 49,
		MessageType_EncryptedMessage = 50,
		MessageType_DecryptMessage = 51,
		MessageType_DecryptedMessage = 52,
		MessageType_SignIdentity = 53,
		MessageType_SignedIdentity = 54,
		MessageType_GetFeatures = 55,
		MessageType_EthereumGetAddress = 56,
		MessageType_EthereumAddress = 57,
		MessageType_EthereumSignTx = 58,
		MessageType_EthereumTxRequest = 59,
		MessageType_EthereumTxAck = 60,
		MessageType_CharacterRequest = 80,
		MessageType_CharacterAck = 81,
		MessageType_RawTxAck = 82,
		MessageType_ApplyPolicies = 83,
		MessageType_DebugLinkDecision = 100,
		MessageType_DebugLinkGetState = 101,
		MessageType_DebugLinkState = 102,
		MessageType_DebugLinkStop = 103,
		MessageType_DebugLinkLog = 104,
		MessageType_DebugLinkFillConfig = 105,
		
	}
}
